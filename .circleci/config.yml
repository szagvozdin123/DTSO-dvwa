version: 2
jobs:
  build:
    # Working directory is where the CVS code is copied to CircleCI platform
    #working_directory: ~/DTSO-dvwa
    # Either docker, machine or MacOS directive must be present in every config file as it sets the execution environment for every build
    docker:
      - image: circleci/buildpack-deps:jessie
    branches:
      only: master
    # Checkout the CVS code to CircleCI platform
    # Setup remote docker directive tells CircleCI to setup 'docker' environemnt to build the Docker images
    # more on that here https://circleci.com/docs/2.0/building-docker-images/
    steps:
      - checkout
      #- setup_remote_docker

      #- run: sudo apt-get update && sudo apt-get -y install docker-ce docker-ce-cli containerd.io
      #- run: sudo apt-get update
      #- run: echo $(dockerd -v)
      #- run: curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
      #- run: wget https://download.docker.com/linux/debian/dists/jessie/pool/stable/amd64/docker-ce_18.06.3~ce~3-0~debian_amd64.deb
      #- run: sudo dpkg - i docker-ce_18.06.3~ce~3-0~debian_amd64.deb
      #- run: echo $(which dockerd)
      #- run: docker -H $DOCKER_HOST build . -t 715922152488.dkr.ecr.eu-central-1.amazonaws.com/test:$CIRCLE_BUILD_NUM --no-cache=true
      #- run: docker build . -t dvwa:$CIRCLE_BUILD_NUM --no-cache=true
      #- run: echo 'id=$(docker images | grep -E '^test' | awk -e '{print $3}')'
      #- run: echo $(docker images | grep 'test')
      - run: export login=$(aws ecr get-login --no-include-email --region eu-central-1) >> $BASH_ENV
      #- run: echo 'export login="foo"' >> $BASH_ENV
      - run: echo ${login}
      #- run: $login
      #- run: docker -H $DOCKER_HOST push 715922152488.dkr.ecr.eu-central-1.amazonaws.com/test:$CIRCLE_BUILD_NUM
      #- run: echo 'export DOCKER_REPO="$(if [ ${CIRCLE_PROJECT_USERNAME} == 'Securing-DevOps' ]; then echo securingdevops; else echo $DOCKER_USER; fi)"' >> $BASH_ENV
      #- run: mkdir -p "${GOPATH_BASE}"
      #- run: mkdir -p "${GOPATH_HEAD}/bin"
      #- run: go get -u github.com/govend/govend

      #- run:
      #    name: Build application container
      #    command: |
      #      go install --ldflags '-extldflags "-static"' github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME};
      #      [ ! -e bin ] && mkdir bin;
      #      cp "${GOPATH_HEAD}/bin/${CIRCLE_PROJECT_REPONAME}" bin/invoicer;
      #      docker build -t ${DOCKER_REPO}/${CIRCLE_PROJECT_REPONAME} .;

      #- run:
      #    name: Run application in background
      #    command: |
      #      docker run ${DOCKER_REPO}/${CIRCLE_PROJECT_REPONAME}
      #    background: true

      #- run:
      #   name: ZAP baseline test of application
          # Only fail on error code 1, which indicates at least one FAIL was found.
          # error codes 2 & 3 indicate WARN or other, and should not break the run
      #    command: |
      #     (
      #      docker pull owasp/zap2docker-weekly && \
      #      docker run -t owasp/zap2docker-weekly zap-baseline.py \
      #          -u https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/master/zap-baseline.conf \
      #          -t http://172.17.0.2:8080/ || \
      #     if [ $? -ne 1 ]; then exit 0; else exit 1; fi;
      #      )

      #- run:
      #    name: Test dependencies are up to date
      #    command: |
      #      GOPATH="${GOPATH_HEAD}"; cd /go/src/github.com/szagvozdin123/invoicer && govend -u --prune && git diff --quiet

      #- deploy:
          # Push application container to dockerhub
      #    command: |
      #      if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #          docker login -u ${DOCKER_USER} -p ${DOCKER_PASS};
      #          docker push ${DOCKER_REPO}/${CIRCLE_PROJECT_REPONAME};
      #      fi
  #test:
  #post:
 
  #    bash <(curl -s https://blackducksoftware.github.io/hub-detect/hub-detect.sh) --blackduck.hub.url="https://hubeval03.blackducksoftware.com" --blackduck.api.token=Nzk0NzBjYjgtMWVkZS00ODA2LThjN2ItMjA3YjdmYjJhM2JhOjRiYTMxNjZlLTdiNDYtNGZkZS1hNTYzLTNiZDJkNDYzYTk1YQ==
